// Rem output with px fallback
@mixin font-size($sizeValue: 1) {
	font-size: ($sizeValue * 16) * 1px;
	font-size: $sizeValue * 1rem;
}

// Center block
@mixin center-block {
	display: block;
	margin-left: auto;
	margin-right: auto;
}

@mixin desaturate($dark: false) {
	//filter: grayscale(100%) brightness(0.3) contrast(1.25);
	filter: grayscale(100%) brightness(1.8) contrast(1.25);
}

@mixin box-shadow() {
	box-shadow: 1px 1px 3px transparentize($color__neutral, 0.5);
}

// A card element, used to show contained bits of information.
//
// :hover             - Subtle hover highlight.
// .stars-given       - A highlight indicating youâ€™ve already given a star.
// .stars-given:hover - Subtle hover highlight on top of stars-given styling.
// .disabled          - Dims the button to indicate it cannot be used.
//
// Styleguide 3.1
@mixin card() {
	@include box-shadow;
	background: $color__white;
	margin: 0 0 $size__site-gutter/2 0;
	padding: $size__site-gutter/2;
}

@mixin small-caps() {
	font-family: $font__accent;
	@include font-size(0.8);
	font-weight: 600;
	letter-spacing: 1px;
	margin: 0;
	text-transform: uppercase;

	@include tablet {
		@include font-size(0.9);
	}
}


// A skewed edge, used to make containers look funkier.
// Courtesy of http://www.hongkiat.com/blog/skewed-edges-css/
@mixin angled-edge($position, $angle){
	width: 100%;
	position: relative;

	&::before,
	&::after {
		content: '';
		display: block;
		width: 100%;
		height: 100%;
		left: 0;
		right: 0;
		position: absolute;
		background: inherit;
		z-index: -1;
		transition: ease all .5s;
	}

    @if $position == 'topleft' {
		&::before {
        	top: 0;
        	transform-origin: right top;
        	transform: skewY($angle);
      	}

		&::after {
			display: none;
		}
	}

    @if $position == 'topright' {
		&::before {
	        top: 0;
	        transform-origin: left top;
	        transform: skewY(-$angle);
		}

		&::after {
			display: none;
		}
    }

    @if $position == 'bottomleft' {
		&::after {
	        bottom: 0;
	        transform-origin: right bottom;
	        transform: skewY(-$angle);
      	}

		&::before {
			display: none;
		}
	}

    @if $position == 'bottomright' {
		&::after {
	        bottom: 0;
	        transform-origin: left bottom;
	        transform: skewY($angle);
      	}

		&::before {
			display: none;
		}
    }
}
